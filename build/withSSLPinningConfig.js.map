{"version":3,"file":"withSSLPinningConfig.js","sourceRoot":"","sources":["../src/withSSLPinningConfig.ts"],"names":[],"mappings":";;AAAA,MAAM,EAAE,oBAAoB,EAAE,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;AAEjE,MAAM,oBAAoB,GAAG,CAAC,MAAM,EAAE,SAAS,EAAG,EAAE;IAClD,+BAA+B,CAC3B,SAAS,EAAE,YAAY,EACvB,SAAS,EAAE,QAAQ,CACpB,CAAC;IACJ,MAAM,oBAAoB,GAAe,EAAE,CAAC;IAC5C,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;QACpD,oBAAoB,CAAC,IAAI,CAAC;YACxB,IAAI,EAAE,UAAU;YAChB,GAAG,EAAE,GAAG;YACR,KAAK,EAAE,KAAK;SACb,CAAC,CAAC;KACJ;IAED,OAAO,oBAAoB,CAAC,MAAM,EAAE,CAAC,MAAM,EAAE,EAAE;QAC7C,oBAAoB,CAAC,GAAG,CAAC,CAAC,cAAc,EAAE,EAAE,CAC1C,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CACvC,CAAC;QAEF,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,kBAAe,oBAAoB,CAAC;AAEpC,MAAM,qBAAsB,SAAQ,KAAK;IACvC,YAAY,OAAe;QACzB,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,uBAAuB,CAAC;IACtC,CAAC;CACF;AAED,MAAM,+BAA+B,GAAG,CACtC,YAAsB,EACtB,QAAgB,EAChB,EAAE;IACF,IAAI,CAAC,YAAY,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;QAC9C,MAAM,IAAI,qBAAqB,CAC7B,+HAA+H;YAC7H,KAAK;YACL,yCAAyC;YACzC,OAAO;YACP,iCAAiC;YACjC,uBAAuB;YACvB,8BAA8B;YAC9B,qCAAqC;YACrC,6BAA6B;YAC7B,UAAU;YACV,QAAQ;YACR,GAAG,CACN,CAAC;KACH;IAED,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;QACvC,MAAM,IAAI,qBAAqB,CAC7B,wFAAwF;YACtF,KAAK;YACL,yCAAyC;YACzC,OAAO;YACP,iCAAiC;YACjC,uBAAuB;YACvB,8BAA8B;YAC9B,qCAAqC;YACrC,6BAA6B;YAC7B,UAAU;YACV,QAAQ;YACR,GAAG,CACN,CAAC;KACH;AACH,CAAC,CAAC","sourcesContent":["const { withGradleProperties } = require(\"@expo/config-plugins\");\n\nconst withSSLPinningConfig = (config, sslConfig ) => {\n  validateCertificatesAndHostname(\n      sslConfig?.certificates,\n      sslConfig?.hostName\n    );\n  const newGraddleProperties: Array<any> = [];\n  for (const [key, value] of Object.entries(sslConfig)) {\n    newGraddleProperties.push({\n      type: \"property\",\n      key: key,\n      value: value,\n    });\n  }\n\n  return withGradleProperties(config, (config) => {\n    newGraddleProperties.map((gradleProperty) =>\n      config.modResults.push(gradleProperty)\n    );\n\n    return config;\n  });\n};\n\nexport default withSSLPinningConfig;\n\nclass SSLPinningConfigError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"SSLPinningConfigError\";\n  }\n}\n\nconst validateCertificatesAndHostname = (\n  certificates: string[],\n  hostName: string\n) => {\n  if (!certificates || certificates.length === 0) {\n    throw new SSLPinningConfigError(\n      'The attribute \"certificates\" is empty or undefined, please add the fingerprints of your certificates to the plugin inputs :\\n' +\n        \"[\\n\" +\n        \"'@bam.tech/react-native-ssl-pinning',\\n\" +\n        \"  {\\n\" +\n        '    hostName: \"yourhostName\",\\n' +\n        \"    certificates: [\\n\" +\n        \"      certificateSHAFinal,\\n\" +\n        \"      certificateSHAIntermediate,\\n\" +\n        \"      certificateSHARoot,\\n\" +\n        \"    ],\\n\" +\n        \"  },\\n\" +\n        \"]\"\n    );\n  }\n\n  if (!hostName || hostName.trim() === \"\") {\n    throw new SSLPinningConfigError(\n      'The attribute \"hostName\" is empty or undefined, please add it to the config inputs :\\n' +\n        \"[\\n\" +\n        \"'@bam.tech/react-native-ssl-pinning',\\n\" +\n        \"  {\\n\" +\n        '    hostName: \"yourhostName\",\\n' +\n        \"    certificates: [\\n\" +\n        \"      certificateSHAFinal,\\n\" +\n        \"      certificateSHAIntermediate,\\n\" +\n        \"      certificateSHARoot,\\n\" +\n        \"    ],\\n\" +\n        \"  },\\n\" +\n        \"]\"\n    );\n  }\n};\n\n"]}